{"version":3,"sources":["redux/newsReducer.js","components/Table.jsx","functions/getFormatedDate.js","App.js","reportWebVitals.js","redux/index.js","index.js"],"names":["fetchNewsByPage","createAsyncThunk","page","a","axios","get","response","data","counterSlice","createSlice","name","initialState","news","status","error","reducers","extraReducers","pending","state","action","rejected","payload","fulfilled","push","Table","columns","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","toggleSortBy","className","onClick","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","getFormatedDate","seconds","ms","Intl","DateTimeFormat","year","month","day","hour","minute","format","App","dispatch","useDispatch","useSelector","useState","setPage","useEffect","useMemo","Header","accessor","Cell","value","href","original","url","target","length","scrollThreshold","dataLength","next","hasMore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","newsReducer","store","configureStore","reducer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f93f01ea.chunk.js","sourcesContent":["// import {\r\n//     createReducer,\r\n//     createAction,\r\n//     createAsyncThunk\r\n// } from \"@reduxjs/toolkit\";\r\n\r\n// const initialState = {\r\n//     news: []\r\n// };\r\n// export const inc = createAction('INC')\r\n// export default createReducer(\r\n//     initialState, {\r\n//         [inc]: function (state) {\r\n//             state.count = state.count + 1\r\n//         }\r\n//     }\r\n// );\r\n\r\nimport {\r\n    createAsyncThunk,\r\n    createSlice\r\n} from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n    news: [],\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nexport const fetchNewsByPage = createAsyncThunk(\r\n    'news/fetchNews',\r\n    async (page) => {\r\n        const response = await axios.get(`https://api.hnpwa.com/v0/news/${page}.json`)\r\n        return response.data\r\n        \r\n    }\r\n)\r\n\r\nconst counterSlice = createSlice({\r\n    name: 'news',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: {\r\n        [fetchNewsByPage.pending]: (state, action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchNewsByPage.rejected]: (state, action) => {\r\n            state.status = 'failed'\r\n            state.error = action.payload\r\n        },\r\n        [fetchNewsByPage.fulfilled]: (state, action) => {\r\n            state.status = 'loaded'\r\n            state.news.push(...action.payload)\r\n        },\r\n    },\r\n})\r\nexport default counterSlice.reducer","import React from 'react'\r\nimport { useTable, useSortBy } from \"react-table\";\r\n\r\nexport default function Table({ columns, data }) {\r\n    // Use the useTable Hook to send the columns and data to build the table\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups, if your table has groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\r\n        toggleSortBy\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    },\r\n        useSortBy);\r\n\r\n    return (\r\n        <>\r\n        <button className=\"mobsort\" onClick={()=>toggleSortBy('time')}>Sort by Date</button>\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => {\r\n                            return (<th className={column.className} {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render(\"Header\")}\r\n                                <span>\r\n                                    {column.isSorted\r\n                                        ? column.isSortedDesc\r\n                                            ? ' ðŸ”½'\r\n                                            : ' ðŸ”¼'\r\n                                        : ''}\r\n                                </span>\r\n                            </th>)\r\n                        })}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td className={cell.column.className} {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table >\r\n        </>\r\n    );\r\n}\r\n","function getFormatedDate(seconds) {\r\nconst ms= seconds*1000\r\nconst options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\r\nreturn new Intl.DateTimeFormat('en-US', options).format(ms)\r\n}\r\nexport default getFormatedDate;","import React, { useEffect, useState, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { fetchNewsByPage } from './redux/newsReducer'\nimport Table from './components/Table.jsx'\nimport getFormatedDate from './functions/getFormatedDate.js';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const news = useSelector((state) => state.news.news);\n  // const newsStatus = useSelector((state) => state.news.status);\n  // const error = useSelector((state) => state.news.error);\n  const [page, setPage] = useState(1)\n\n  useEffect(() => {\n    dispatch(fetchNewsByPage(page))\n  }, [dispatch, page])\n\n  const handleScroll = () => {\n    setPage(page + 1)\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Adding Time\",\n        accessor: \"time\",\n        className: \"mh\",\n        Cell: ({ value }) => {\n          return (<div className=\"elipsis\">{getFormatedDate(value)}</div>)\n        },\n      },\n      {\n        Header: \"New\",\n        accessor: \"title\",\n        Cell: ({ value, row }) => {\n          return (<a className=\"elipsis\" href={row.original.url} target=\"blank\">{value}</a>);\n        },\n      },\n      {\n        Header: \"Domain\",\n        accessor: \"domain\",\n        className: \"mh\",\n        Cell: ({ value }) => {\n          return (<div className=\"elipsis--domain\">{value}</div>);\n        },\n      }\n    ],\n\n    []\n  );\n  return (\n    <div className=\"container\">\n      {news.length > 0 &&\n        <InfiniteScroll\n          scrollThreshold={0.9}\n          dataLength={news.length}\n          next={handleScroll}\n          hasMore={page < 10}\n        >\n          <Table columns={columns} data={news} />\n          {/* <MobileTable news={[...news]} /> */}\n        </InfiniteScroll>}\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    combineReducers,\r\n    configureStore\r\n} from '@reduxjs/toolkit';\r\nimport newsReducer from './newsReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    news: newsReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n    reducer: rootReducer,\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}